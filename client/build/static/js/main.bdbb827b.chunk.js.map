{"version":3,"sources":["components/Header.js","context/AppReducer.js","context/GlobalState.js","utils/format.js","components/Balance.js","components/IncomeExpenses.js","components/Transaction.js","components/TransactionList.js","components/AddTransaction.js","App.js","index.js"],"names":["Header","state","action","type","loading","transactions","payload","filter","transaction","_id","error","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","getTransactions","a","axios","get","res","data","response","deleteTransaction","id","delete","addTransaction","config","headers","post","Provider","value","numberWithCommas","x","toString","replace","Balance","total","useContext","map","amount","reduce","tot","amt","toFixed","IncomeExpenses","amounts","income","item","acc","expense","className","Transaction","sign","text","Math","abs","onClick","TransactionList","useEffect","AddTransaction","useState","setText","setAmount","onSubmit","e","preventDefault","newTransaction","floor","random","htmlFor","onChange","target","placeholder","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bdbb827b.chunk.js","sourcesContent":["\r\nconst Header = () => {\r\n    return (\r\n        <h2>\r\n            Expense Tracker\r\n        </h2>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n\r\n\r\n\r\n","export default (state, action) => {\r\n    /* 'Reducer' is a way to change our state and send it down to the components. We can't just change it, and we have to create a \r\n    'new state' and send it down */\r\n    switch(action.type) {\r\n        case 'GET_TRANSACTIONS':\r\n            return {\r\n                ...state,\r\n                loading: false, // This means that the transactions were fetched\r\n                transactions: action.payload    /* Populate 'transactions' array with 'action.payload'. 'payload' is going to be the data\r\n                                                we get from the response - 'payload: res.res.data' */\r\n            }\r\n        case 'DELETE_TRANSACTION':\r\n            return {\r\n                ...state,\r\n                transactions: state.transactions.filter(transaction => transaction._id !== action.payload)\r\n            }\r\n        case 'ADD_TRANSACTION':\r\n            return {\r\n                ...state,\r\n                transactions: [...state.transactions, action.payload] // When we are fetching from the API, the latest should be at the end\r\n                // Here we need to return the 'Transactions' that are already there in addition to the new one which is in the 'payload'\r\n            }\r\n        case 'TRANSACTION_ERROR':\r\n            return {\r\n                ...state,\r\n                error: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};","/* If this is a larger application and if we had multiple resources, we better have separate States for those resources instead of \r\nhaving a 'Global State' */\r\n\r\nimport { createContext, useReducer } from 'react';\r\nimport AppReducer from './AppReducer';\r\nimport axios from 'axios';\r\n\r\n// Initial State\r\nconst initialState = {\r\n    transactions: [],\r\n    error: null,    // Put this in 'state' in case if you want to use them in your application components with 'alert' or something like that\r\n    loading: true   // To display a 'spinner' if it is still loading\r\n\r\n}\r\n\r\n// Create our 'Global Context', using the 'createContext'\r\nexport const GlobalContext = createContext(initialState);\r\n\r\n/* In order for other components to have access to our 'Global State', we need to have a 'Provider'.\r\nWhat a 'Provider' does is, it provides our 'State', it provides any 'actions' and stuff like that to the components that are \r\nwrapped around */\r\n\r\n// Provider Component\r\nexport const GlobalProvider = ({ children }) => {\r\n    // Reducer Function\r\n    const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n    // Actions - that are going to make calls to our 'reducer'\r\n    const getTransactions = async () => {   // We have to make this 'async' since we are using 'axios' which returns a 'promise'\r\n        try {\r\n            // state.loading = true;    // We can set 'loading' to 'true' here and set its initial value to 'false' also\r\n\r\n            /* Here we don't need to include 'http://localhost:5000/' part of our Get url because we have added a 'Proxy' to include that\r\n            (in the 'package.json' file under 'client' folder) */\r\n            const res = await axios.get('/api/v1/transactions');\r\n\r\n            // 'res.data' will return the entire response object including 'success', 'count' and 'data'\r\n            dispatch({\r\n                type: 'GET_TRANSACTIONS',\r\n                payload: res.data.data   // This will be the 'transactions' from our back end\r\n            });\r\n        } catch (err) {\r\n            dispatch({\r\n                type: 'TRANSACTION_ERROR',\r\n                payload: err.response.data.error  // Here we want to send the actual error\r\n            });\r\n        }\r\n    };\r\n\r\n    const deleteTransaction = async id => {\r\n        try {\r\n            await axios.delete(`/api/v1/transactions/${id}`);\r\n\r\n            dispatch({\r\n                type: 'DELETE_TRANSACTION',\r\n                payload: id\r\n            });\r\n        } catch (err) {\r\n            dispatch({\r\n                type: 'TRANSACTION_ERROR',\r\n                payload: err.response.data.error\r\n            });\r\n        }\r\n    };\r\n\r\n    const addTransaction = async transaction => {\r\n        // Since we are sending data, we need to specify a 'Content-Type'\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        };\r\n\r\n        try {\r\n            const res = await axios.post('/api/v1/transactions', transaction, config);\r\n\r\n            dispatch({\r\n                type: 'ADD_TRANSACTION',\r\n                payload: res.data.data\r\n            });\r\n        } catch (err) {\r\n            dispatch({\r\n                type: 'TRANSACTION_ERROR',\r\n                payload: err.response.data.error\r\n            });\r\n        }        \r\n    };\r\n\r\n    return (<GlobalContext.Provider value={\r\n        {\r\n            transactions: state.transactions,\r\n            error: state.error,\r\n            loading: state.loading,\r\n            getTransactions,\r\n            deleteTransaction, // In order for us to use this action, we have to pass it down in our 'Provider'\r\n            addTransaction\r\n        }\r\n    }>\r\n        {/* This 'children' prop is going to be whatever we wrap inside our 'GlobalProvider' */}\r\n        { children }    \r\n    </GlobalContext.Provider>);\r\n};\r\n\r\n\r\n","export function numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n};\r\n\r\n","import { useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\nimport { numberWithCommas } from '../utils/format';\r\n\r\nconst Balance = () => {\r\n    const { transactions } = useContext(GlobalContext);\r\n\r\n    const amounts = transactions.map(transaction => transaction.amount);\r\n    const total = amounts.reduce((tot, amt) => tot += amt, 0).toFixed(2);\r\n\r\n    return (\r\n        <>\r\n            <h4>Your Balance</h4>\r\n            <h1>{numberWithCommas(total)}</h1>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Balance;\r\n\r\n","import { useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\nimport { numberWithCommas } from '../utils/format';\r\n\r\nconst IncomeExpenses = () => {\r\n    const { transactions } = useContext(GlobalContext);\r\n\r\n    const amounts = transactions.map(transaction => transaction.amount);\r\n\r\n    const income = amounts\r\n        .filter(item => item > 0)\r\n        .reduce((acc, item) => acc+=item, 0)\r\n        .toFixed(2);\r\n\r\n    const expense = (amounts\r\n        .filter(item => item < 0)\r\n        .reduce((acc, item) => acc+=item, 0) * -1\r\n        ).toFixed(2);\r\n\r\n    return (\r\n        <div className=\"inc-exp-container\">\r\n        <div>\r\n            <h4>Income</h4>\r\n            <p className=\"money plus\">${numberWithCommas(income)}</p>\r\n        </div>\r\n        <div>\r\n            <h4>Expense</h4>\r\n            <p className=\"money minus\">${numberWithCommas(expense)}</p>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default IncomeExpenses;\r\n\r\n","import { useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\nimport { numberWithCommas } from '../utils/format';\r\n\r\nconst Transaction = ({transaction}) => {\r\n    const { deleteTransaction } = useContext(GlobalContext);    // Pulling out 'deleteTransaction' from our 'GlobalContext'\r\n    const sign = transaction.amount < 0 ? '-' : '+';\r\n\r\n    return (\r\n        <li className={transaction.amount < 0 ? 'minus': 'plus'}>\r\n            {transaction.text} <span>{sign}${numberWithCommas(Math.abs(transaction.amount))}</span>\r\n            <button className=\"delete-btn\" onClick={() => deleteTransaction(transaction._id)}>x</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Transaction;\r\n","import { useContext, useEffect } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\nimport Transaction from './Transaction';\r\n\r\nconst TransactionList = () => {\r\n    const { transactions, getTransactions } = useContext(GlobalContext);\r\n\r\n    /* Since 'getTransactions' is an asynchronous call, we want to call this in the 'useEffect' hook. So if you make any Http requests from \r\n    your components, you have to do that in 'useEffect' */\r\n    useEffect(() => {\r\n        getTransactions();\r\n\r\n        // This will fire off a warning in the console and if you want to quiet that warning, you can add the following line of code:\r\n        \r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <h3>History</h3>\r\n            <ul className=\"list\">\r\n                {transactions.map(transaction => (\r\n                    <Transaction key={transaction._id} transaction={transaction}/>\r\n                ))}                \r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TransactionList;\r\n\r\n","// With the Form, we do need some 'Component Level State', because we have some 'input fields' and they need to be part of our state\r\nimport { useState, useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nconst AddTransaction = () => {\r\n    // 'Component level state' used with 'Controlled Components'\r\n    const [text, setText] = useState('');\r\n    const [amount, setAmount] = useState(0);\r\n\r\n    const { addTransaction } = useContext(GlobalContext);\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        /* We have our 'Component level state' hooked into our inputs and the values are 'text' and the 'amount', and that is what we\r\n        are passing into 'newTransaction' object */\r\n        const newTransaction = {\r\n            id: Math.floor(Math.random() * 100000000),\r\n            text,\r\n            amount: +amount // '+' sign will convert the 'string' (amount) into a 'number' (This is similar to 'parseInt(amount)')\r\n        }\r\n\r\n        addTransaction(newTransaction);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h3>Add new transaction</h3>\r\n                <form onSubmit={onSubmit}>\r\n                    <div className=\"form-control\">\r\n                        <label htmlFor=\"text\">Text</label>\r\n                        <input type=\"text\" value={text} onChange={e => setText(e.target.value)} placeholder=\"Enter text...\" />\r\n                    </div>\r\n                    <div className=\"form-control\">\r\n                        <label htmlFor=\"amount\">Amount <br />\r\n                            (negative - expense, positive - income)</label>\r\n                        <input type=\"number\" value={amount} onChange={e => setAmount(e.target.value)} placeholder=\"Enter amount...\" />\r\n                    </div>\r\n                    <button className=\"btn\">Add transaction</button>\r\n            </form>\r\n            </>\r\n    )\r\n}\r\n\r\nexport default AddTransaction;\r\n\r\n","import './App.css';\nimport Header from './components/Header';\nimport Balance from './components/Balance';\nimport IncomeExpenses from './components/IncomeExpenses';\nimport TransactionList from './components/TransactionList';\nimport AddTransaction from './components/AddTransaction';\nimport { GlobalProvider } from './context/GlobalState';\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      <Header />\n\n      <div className='container'>\n        <Balance />\n        <IncomeExpenses />\n        <TransactionList />\n        <AddTransaction />\n      </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}